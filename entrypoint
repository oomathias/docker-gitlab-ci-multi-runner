#!/bin/bash
set -e

DATA_DIR="/etc/gitlab-runner"
HOME_DIR="/home/gitlab-runner"
LOCAL_CA_PATH="/usr/local/share/ca-certificates/ca.crt"

CA_CERTIFICATES_PATH=${CA_CERTIFICATES_PATH:-$DATA_DIR/certs/ca.crt}
CONFIG_FILE=${CONFIG_FILE:-$DATA_DIR/config.toml}
RUNNER_NAME=${RUNNER_NAME:-$RUNNER_DESCRIPTION} # DEPRECATED
REGISTRATION_TOKEN=${REGISTRATION_TOKEN:-$RUNNER_TOKEN} # DEPRECATED

create_data_dir() {
  mkdir -p ${DATA_DIR}
  chown gitlab-runner:nogroup ${DATA_DIR}
}

generate_ssh_deploy_keys() {
  sudo -HEu gitlab-runner mkdir -p ${HOME_DIR}/.ssh/

  if [[ ! -e ${HOME_DIR}/.ssh/id_rsa || ! -e ${HOME_DIR}/.ssh/id_rsa.pub ]]; then
    echo "Generating SSH deploy keys..."
    rm -rf ${HOME_DIR}/.ssh/id_rsa ${HOME_DIR}/.ssh/id_rsa.pub
    sudo -HEu gitlab-runner ssh-keygen -t rsa -N "" -f ${HOME_DIR}/.ssh/id_rsa

    echo ""
    echo -n "Your SSH deploy key is: "
    cat ${HOME_DIR}/.ssh/id_rsa.pub
    echo ""
  fi

  chmod 600 ${HOME_DIR}/.ssh/id_rsa ${HOME_DIR}/.ssh/id_rsa.pub
  chmod 700 ${HOME_DIR}/.ssh
  chown -R gitlab-runner:nogroup ${HOME_DIR}/.ssh/
}

update_ca() {
    echo "Updating CA certificates..."
    cp "${CA_CERTIFICATES_PATH}" "${LOCAL_CA_PATH}"
    update-ca-certificates --fresh >/dev/null
}

configure_ci_runner() {
  if [[ ! -e ${CONFIG_FILE} ]]; then
    if [[ -n ${CI_SERVER_URL} && -n ${REGISTRATION_TOKEN} && -n ${RUNNER_NAME} && -n ${RUNNER_EXECUTOR} ]]; then
      if [[ "${RUNNER_EXECUTOR}" == "docker" ]];then
        if [[ "${DOCKER_MODE}" == "socket" ]];then
          RUNNER_DOCKER_ARGS="$RUNNER_DOCKER_ARGS --docker-volumes /var/run/docker.sock:/var/run/docker.sock"
        fi
      fi
      RUNNER_ENV_TMP=${RUNNER_ENV}
      unset RUNNER_ENV
      sudo -HEu gitlab-runner \
        gitlab-runner register \
          --non-interactive \
          --config ${CONFIG_FILE} \
          ${RUNNER_DOCKER_ARGS} \
          $(if [[ -n ${RUNNER_ENV_TMP} ]]; then RUNNER_ENV_TMP=($RUNNER_ENV_TMP); printf " --env %s" "${RUNNER_ENV_TMP[@]}"; fi)
      unset RUNNER_ENV_TMP
    else
      sudo -HEu gitlab-runner \
        gitlab-runner register --config ${CONFIG_FILE}
    fi
    if [[ -n ${RUNNER_CONCURRENCY} ]];then
      sed -i "s/concurrent = .*/concurrent = ${RUNNER_CONCURRENCY}/" ${DATA_DIR}/config.toml
    fi
    if [[ -n ${RUNNER_CHECK_INTERVAL} ]];then
      sed -i "s/check_interval = .*/check_interval = ${RUNNER_CHECK_INTERVAL}/" ${DATA_DIR}/config.toml
    fi
    if [[ -n ${RUNNER_SESSION_TIMEOUT} ]];then
      sed -i "s/session_timeout = .*/session_timeout = ${RUNNER_SESSION_TIMEOUT}/" ${DATA_DIR}/config.toml
    fi
    echo "Config:"
    echo ""
    cat ${CONFIG_FILE}
  fi
}

# allow arguments to be passed to gitlab-runner
if [[ ${1:0:1} = '-' ]]; then
  EXTRA_ARGS="$@"
  set --
elif [[ ${1} == gitlab-runner || ${1} == $(which gitlab-runner) ]]; then
  EXTRA_ARGS="${@:2}"
  set --
fi

stop() {
  echo "Stopping runner"
  start-stop-daemon --stop \
    --user gitlab-runner \
    --group nobody \
    --pidfile /run/gitlab-runner.pid
    
  if [[ "${RUNNER_AUTOUNREGISTER}" == "true" ]];then
    echo "Unregistering runner from ${CI_SERVER_URL}"
    sudo -HEu gitlab-runner \
      gitlab-runner unregister --url ${CI_SERVER_URL} --token $(grep token ${DATA_DIR}/config.toml | awk '{print $3}' | tr -d '"')
  fi
}
trap 'stop' QUIT
trap 'stop' INT
trap 'stop' TERM

# default behaviour is to launch gitlab-runner
if [[ -z ${1} ]]; then
  create_data_dir
  if [ -f "${CA_CERTIFICATES_PATH}" ]; then
    cmp -s "${CA_CERTIFICATES_PATH}" "${LOCAL_CA_PATH}" || update_ca
  fi
  generate_ssh_deploy_keys
  configure_ci_runner
  
  unset REGISTRATION_TOKEN
  
  start-stop-daemon --start \
    --make-pidfile \
    --pidfile /run/gitlab-runner.pid \
    --exec $(which gitlab-runner) -- \
      run \
        --user gitlab-runner \
        --working-directory ${HOME_DIR} \
        --config ${CONFIG_FILE} ${EXTRA_ARGS}
else
  exec "$@"
fi